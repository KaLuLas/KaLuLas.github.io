<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用hexo快速进行博客搭建</title>
    <url>/p/c9e58284d744/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="使用hexo快速进行博客搭建">使用hexo快速进行博客搭建</h1>
<p>之前用wordpress搭建的博客需要折腾的东西太多，编辑器支持也不太好，没有Notion里记笔记来的方便（该说写个笔记两头传本来就麻烦），所以这次用hexo来搭建看看。</p>
<p>部署选择了一键同步生成的网站内容到github
repo上，使用pages来进行网站部署，markdown源文件再自己使用github来同步。</p>
<p>这篇文章主要记录一下搭建网站的过程，还有给搭建的时候看的几个文档链接留个档。</p>
<h4 id="官方文档">官方文档</h4>
<ol type="1">
<li>https://hexo.io/docs/</li>
<li>https://hexo.io/zh-cn/docs/ 中文</li>
</ol>
<h4 id="部署相关github-pages">部署相关（github-pages）</h4>
<ol type="1">
<li>https://segmentfault.com/a/1190000017986794 一键部署</li>
<li>https://zhuanlan.zhihu.com/p/26625249
自定义域名步骤参考，免去之前使用wordpress自己部署网站时解析的麻烦</li>
<li>https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages</li>
</ol>
<p>自定义域名在参考了上述链接后做了一点尝试：</p>
<ol type="1">
<li><p>首先域名还是使用的之前搭建wordpress用的threegates.net</p></li>
<li><p>这里开始需要做的是将域名重定向到github-pages，所以实际上<strong>需要参考的比较权威的文档是上面的链接3</strong></p>
<span id="more"></span></li>
<li><p>github
pages建议的是使用www域，说明了使用www域使pages也会为你进行apex
domain（即不带www的threegates.net）的重定向。</p>
<blockquote>
<p>We recommend always using a <code>www</code> subdomain, even if you
also use an apex domain. When you create a new site with an apex domain,
we automatically attempt to secure the <code>www</code> subdomain for
use when serving your site's content. If you configure a
<code>www</code> subdomain, we automatically attempt to secure the
associated apex domain.</p>
</blockquote></li>
<li><p>参考“Managing a custom domain for your GitHub Pages
site”，首先在gtihub repo的settings-&gt;pages目录下配置Custom
Domain，这里使用<code>www.threegates.net</code></p></li>
<li><p>在阿里云的DNS解析中配置，这里应该将<code>www.threegates.net</code>使用CNAME形式解析到我的<code>kalulas.github.io</code>，且通过dig工具和后续文档可以得知，如果配置了<code>threegates.net</code>到github
pages提供的四个DNS（见下文），github
pages会帮你重定向到网页内容，而<code>www.threegates.net</code>配置到<code>kalulas.github.io</code>之后，后面其实也是解析到github.pages的DNS</p></li>
<li><p>配置如图：</p></li>
<li><p>dig命令解析结果如下（threegates.net的解析情况也一样）：</p>
<pre class="line-numbers language-none"><code class="language-none">$ dig kalulas.github.io +nostats +nocomments +nocmd
; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.8 &lt;&lt;&gt;&gt; kalulas.github.io +nostats +nocomments +nocmd
;; global options: +cmd
;kalulas.github.io.             IN      A
kalulas.github.io.      3600    IN      A       185.199.109.153
kalulas.github.io.      3600    IN      A       185.199.111.153
kalulas.github.io.      3600    IN      A       185.199.110.153
kalulas.github.io.      3600    IN      A       185.199.108.153</code></pre>
<pre class="line-numbers language-none"><code class="language-none">$ dig www.threegates.net +nostats +nocomment
; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.8 &lt;&lt;&gt;&gt; www.threegates.net +nostats +nocomment
;; global options: +cmd
;www.threegates.net.            IN      A
www.threegates.net.     600     IN      CNAME   kalulas.github.io.
kalulas.github.io.      3600    IN      A       185.199.109.153
kalulas.github.io.      3600    IN      A       185.199.111.153
kalulas.github.io.      3600    IN      A       185.199.110.153
kalulas.github.io.      3600    IN      A       185.199.108.153</code></pre></li>
<li><p>最后，在第4步中修改Custom
Domain会添加一个文件CNAME到repo的根目录下，但是由于使用了一键部署，实际上同步的目录是~/.../your_site/.deploy_git，可以在这个目录下同步，但是这个目录是由~/.../your_site/source生成而来的，所以得在source下也创建一个CNAME文件，内容就用github为你生成的<code>www.threegates.net</code>即可</p></li>
<li><p>最后，文档提示了可以enforce
HTTPS，这个就作为可选项就晚点再做吧</p></li>
</ol>
<h4 id="网站主题">网站主题</h4>
<ol type="1">
<li>https://theme-next.iissnan.com/getting-started.html
现在用的是NEXT主题，主题的参考文档也挺详细。纠正一个文档中发现的错误：文档中设置语言使用的language是zh-Hans，但现在使用的是zh-CN，可能是没更新的原因</li>
<li>https://theme-next.js.org/docs/
一样是NEXT主题的文档，但是英文版的似乎内容更全一点，阅读起来也不费劲</li>
</ol>
<h5 id="样式layout自定义">样式（layout）自定义</h5>
<p>阅读了hexo和NEXT的模板相关文章，简单看了下关联的njx，ejs文件，想通过is_post()或者is_home()的helper方法实现一下仅在文章页显示阅读进度条的效果，但是似乎返回结果不正确，现在在next的github页提了issue还在等回复。</p>
<p>njx中的语法与ejs不完全相同，简单参考了非官方文档：</p>
<ol type="1">
<li>https://carrion.cc/20210201/85bc1840d3ea.html
核对了一下njk中的helper语法</li>
</ol>
<h5 id="图片墙">图片墙</h5>
<p>选用了hexo-light-gallery插件，传送门
https://github.com/lzane/hexo-light-gallery
按照教程安装了hexo-light-gallery，对node_modules/hexo-light-gallery/src/renderer.js
做了一点修改</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">&#x2F;&#x2F; node_modules&#x2F;hexo-light-gallery&#x2F;src&#x2F;renderer.js 
function addTag(data)&#123;
    var config &#x3D; this.config.lightgallery;
    if(!config)&#123;
        return;
    &#125;

    &#x2F;&#x2F; add js
    &#x2F;&#x2F; 这里本来 &#39;&gt;&#39; 在 &#39;&quot;&#39; 前面，会造成结构破坏
    data.content &#x3D; &#39;&lt;div class&#x3D;&quot;.article-gallery&quot;&gt;&#39;+data.content+&#39;&lt;&#x2F;div&gt;&#39;;
    data.content+&#x3D;&#39;&lt;script src&#x3D;&quot;&#39;+config.js+&#39;&quot;&gt;&lt;&#x2F;script&gt;&#39;;

    &#x2F;&#x2F; add css
    var css &#x3D; &#39;&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;&#39;+config.css+&#39;&quot; &#x2F;&gt;&#39;;
    data.content &#x3D; css + data.content;

    &#x2F;&#x2F; add plugins
    var plugins &#x3D; Object.keys(config.plugins);
    for (var plugin of plugins)&#123;
        var jsTag &#x3D; &#39;&lt;script src&#x3D;&quot;&#39;+config.plugins[plugin]+&#39;&quot;&gt;&lt;&#x2F;script&gt;&#39;;
        data.content +&#x3D; jsTag;
    &#125;
&#125;

&#x2F;&#x2F; ...
function render(data)&#123;
    if (ignore(data))&#123;
        return;
    &#125;
    &#x2F;&#x2F; 如果找不到图片标签，就不执行下面的代码，就不会在不需要的地方增加多余内容
    if (!imgRgr.exec(data.content))&#123;
        return;
    &#125;

    wrapImage.call(this,data);
    addTag.call(this,data);
    addRunnableTag.call(this,data);
&#125;;

</code></pre>
<p>在lightgallery提供的插件（插件的插件...）中补充了三个插件：</p>
<ol type="1">
<li>lg-thumbnail: 提供图片的缩略图</li>
<li>lg-zoom: 提供图片缩放功能</li>
<li>lg-fullscreen: 提供图片全屏预览功能</li>
</ol>
<p>三个插件都通过npm下载了.min.js文件，放置于/source/js/下，现在的_config.yml如下</p>
<pre class="line-numbers language-none"><code class="language-none"># Plugin: lightgallery https:&#x2F;&#x2F;github.com&#x2F;lzane&#x2F;hexo-light-gallery
lightgallery:
# if you don&#39;t specify the css or js source, the default cdn will be used.
# css: # css source url
# js: #js source url
# sorry that I can not find any cdn hosting following plugins,
# please self-host the plugin js and add url here
  plugins:
    lg-thumbnail: &#x2F;js&#x2F;lg-thumbnail.min.js
    lg-zoom: &#x2F;js&#x2F;lg-zoom.min.js
#   lg-autoplay:
    lg-fullscreen: &#x2F;js&#x2F;lg-fullscreen.min.js
#   lg-pager:
</code></pre>
<h5 id="基于模板进行html生成">基于模板进行html生成</h5>
<p>很在意html中的一些代码引用标签&lt;script&gt;是用什么逻辑加上的，如图上的这种</p>
<a href="/p/c9e58284d744/image-20211224175532445.png" class="gallery-item"><img src="/p/c9e58284d744/image-20211224175532445.png" class="" title="html中的代码标签示例"></a>
<p>要知道它的生成机制才方便做一些js代码上传，还有cdn上的资源放到本地这样的操作，进行了一些排查大致定位下下面这些信息：</p>
<ol type="1">
<li>/node_modules/hexo-theme-next/layout/_scripts/index.njk
文件里可以利用next_js()加载了这些next提供的静态js文件</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none"> 1 &#123;%- include &#39;vendors.njk&#39; -%&#125;
 2
 3 &#123;&#123;- next_js(&#39;comments.js&#39;) &#125;&#125;
 4
 5 &#123;&#123;- next_js(&#39;utils.js&#39;) &#125;&#125;
 6 &#123;%- if theme.motion.enable %&#125;
 7   &#123;&#123;- next_js(&#39;motion.js&#39;) &#125;&#125;
 8 &#123;%- endif %&#125;
 9
10 &#123;%- if theme.scheme &#x3D;&#x3D;&#x3D; &#39;Muse&#39; or theme.scheme &#x3D;&#x3D;&#x3D; &#39;Mist&#39; %&#125;
11   &#123;&#123;- next_js(&#39;schemes&#x2F;muse.js&#39;) &#125;&#125;
12 &#123;%- endif %&#125;
13
14 &#123;&#123;- next_js(&#39;next-boot.js&#39;) &#125;&#125;
15 &#123;%- if theme.bookmark.enable %&#125;
16   &#123;&#123;- next_js(&#39;bookmark.js&#39;) &#125;&#125;
17 &#123;%- endif %&#125;
18 &#123;%- if theme.pjax %&#125;
19   &#123;&#123;- next_js(&#39;pjax.js&#39;) &#125;&#125;
20 &#123;%- endif %&#125;
</code></pre>
<p>而在vendors.njk下可以看到</p>
<pre class="line-numbers language-none"><code class="language-none">1 &#123;%- if theme.canvas_ribbon.enable %&#125;
2   &lt;script size&#x3D;&quot;&#123;&#123; theme.canvas_ribbon.size &#125;&#125;&quot; alpha&#x3D;&quot;&#123;&#123; theme.canvas_ribbon.alpha &#125;&#125;&quot; zIndex&#x3D;&quot;&#123;&#123; theme.canvas_ribbon.zIndex &#125;&#125;&quot; src&#x3D;&quot;&#123;&#123; theme.vendors.canvas_ribbon.url     &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;
3 &#123;%- endif %&#125;
4
5 &#123;%- for name in js_vendors() %&#125;
6   &#123;&#123; next_vendors(name) &#125;&#125;
7 &#123;%- endfor %&#125;
</code></pre>
<p>加载的就是js_vendors下声明所有js资源</p>
<ol start="2" type="1">
<li>像prism-core的这些cdn上获取的js资源，先通过配置来决定是否加载，添加cdn的逻辑如下</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> 1 &#x2F;&#x2F;  node_modules&#x2F;hexo-theme-next&#x2F;scripts&#x2F;helpers&#x2F;next-vendors.js
 &#x2F;* global hexo *&#x2F;
 2
 3 &#39;use strict&#39;;
 4
 5 hexo.extend.helper.register(&#39;js_vendors&#39;, function() &#123;
 6   const &#123; config, theme &#125; &#x3D; this;
 7   const vendors &#x3D; [&#39;anime&#39;];
 8   if (config.prismjs.enable &amp;&amp; !config.prismjs.preprocess) &#123;
 9     vendors.push(&#39;prism&#39;, &#39;prism_autoloader&#39;);
10     if (config.prismjs.line_number) &#123;
11       vendors.push(&#39;prism_line_numbers&#39;);
12     &#125;
13   &#125;
14   if (theme.pjax) &#123;
15     vendors.push(&#39;pjax&#39;);
16   &#125;
17   if (theme.fancybox) &#123;
18     vendors.push(&#39;jquery&#39;, &#39;fancybox_js&#39;);
19   &#125;
20   if (theme.mediumzoom) &#123;
21     vendors.push(&#39;mediumzoom&#39;);
22   &#125;
23   if (theme.lazyload) &#123;
24     vendors.push(&#39;lazyload&#39;);
25   &#125;
26   if (theme.pangu) &#123;
27     vendors.push(&#39;pangu&#39;);
28   &#125;
29   return vendors;
30 &#125;);
</code></pre>
<p>在/node_modules/hexo-theme-next/layout/_scripts/vendors.njk下面遍历js_vendors列表，遍历逻辑就是调用scripts/helpers/engine.js中注册的next_vendors，将代码资源的名字传入。而next_vendors的逻辑就是在theme配置的vendors字段中找相应的配置内容。</p>
<pre class="line-numbers language-none"><code class="language-none">32 hexo.extend.helper.register(&#39;next_vendors&#39;, function(name) &#123;
33   const &#123; url, integrity &#125; &#x3D; this.theme.vendors[name];
34   const type &#x3D; url.endsWith(&#39;css&#39;) ? &#39;css&#39; : &#39;js&#39;;
35   if (type &#x3D;&#x3D;&#x3D; &#39;css&#39;) &#123;
36     if (integrity) return &#96;&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;$&#123;url&#125;&quot; integrity&#x3D;&quot;$&#123;integrity&#125;&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&#96;;
37     return &#96;&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;$&#123;url&#125;&quot;&gt;&#96;;
38   &#125;
39   if (integrity) return &#96;&lt;script src&#x3D;&quot;$&#123;url&#125;&quot; integrity&#x3D;&quot;$&#123;integrity&#125;&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;&#96;;
40   return &#96;&lt;script src&#x3D;&quot;$&#123;url&#125;&quot;&gt;&lt;&#x2F;script&gt;&#96;;
41 &#125;);
</code></pre>
<ol start="3" type="1">
<li>所以如果想加一个js文件资源引用，可以考虑在index.njk就利用next_js()加上，也可以考虑放在next-vendors.js的vendors列表里面，然后再到theme的_config.yml文件里面去配置。</li>
</ol>
<h4 id="资源文件夹">资源文件夹</h4>
<p>网站需要显示一些像网站图标和用户画像，还有文章中的截图这样的资源，参考hexo文档，最后采用的方式是将配置项<code>post_asset_folder</code>设置为true，这会让hexo在新建post时为这个post新建一个同名资源文件夹。然后使用<a
href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>
3.1.0
的特性，在文章中直接使用markdown图片格式，图片链接直接填写图片文件名，hexo会将资源请求重定向到post的同名资源文件夹中。</p>
<p>值得一提的是也可以在其他post中使用相对路径来索引到这些资源，为post之间共享资源提供了思路。</p>
<p>_config.yml配置形式如下：</p>
<pre class="line-numbers language-none"><code class="language-none">post_asset_folder: true
marked:
  prependRoot: true
  postAsset: true</code></pre>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>博客搭建</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>关于配置代码生成器的构想</title>
    <url>/p/ab7a58fcc8d2/</url>
    <content><![CDATA[<h3 id="需求">需求</h3>
<p>目前项目组的开发工作流中，读取表格配置需要重复较多机械性的工作：首先是字段的名称和类型规定上有一定的心智负担，在多种使用渠道（如client，server）下可能要认为进行多次同步，其次是完成读表代码也比较模式化，理论上这些工作都可以由工具提供辅助并最终由工具生成代码。</p>
<h3 id="功能概览">功能概览</h3>
<ol type="1">
<li>将表格的所有字段在工具中显示，由用户来自定义表格属性：字段的类型，用途和默认值</li>
<li>工具能够将表格属性以json形式序列化，以json文件形式进行持久化存储</li>
<li>工具能够依据表格属性以及用户自定义的代码模板来生成读表代码</li>
</ol>
<h3 id="定义">定义</h3>
<p>表名：即配置文件的文件名</p>
<p>字段：即配置表中有实际用途的一列</p>
<p>读表代码：并不提供从资源文件中读取配置数据的功能，仅提供从配置数据解析出对应类型字段的功能</p>
<span id="more"></span>
<h3 id="工具需求文档">工具需求文档</h3>
<p>csv只是配置的一种形式，希望能兼容所有表格类型的配置</p>
<ol type="1">
<li>ConfigCodeGenLib：以dll的形式提供基础功能，包括
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="" />
指定表格的字段可以有有哪些用途（usage）和类型（type），包括值类型与容器类型</li>
<li><input type="checkbox" disabled="" checked="" />
指定生成代码模板目录和生成代码目录，生成读表代码时从这些目录读取</li>
<li><input type="checkbox" disabled="" checked="" />
指定用途（usage）和生成代码模板（template）/生成代码目录之间的关联</li>
<li><input type="checkbox" disabled="" checked="" />
传入配置文件路径，生成表名到字段的属性列表的映射</li>
<li><input type="checkbox" disabled="" checked="" />
在不提供json文件时，仅所有字段的属性都设置为初始值</li>
<li><input type="checkbox" disabled="" checked="" />
在提供json文件时，从json文件中读出字段的属性</li>
<li><input type="checkbox" disabled="" />
提供表名可以获取字段属性列表</li>
<li><input type="checkbox" disabled="" />
提供表名和字段名可以获得到字段的配置信息</li>
<li><input type="checkbox" disabled="" />
可以根据表名和字段名来设置字段的属性</li>
<li><input type="checkbox" disabled="" checked="" />
传入存储路径，可以将表格的配置属性以json形式写入</li>
<li><input type="checkbox" disabled="" />
指定表名和用途，可以根据生成代码模板来生成读表代码（这里需要提供特殊的语法解析，提供给用户一定的自由度，代码模板需要支持if，for等控制结构）</li>
<li><input type="checkbox" disabled="" />
...</li>
</ul></li>
<li>ConfigCodeGen：依赖ConfigCodeGenLib的图形化工具，提供功能包括
<ol type="1">
<li>提供配置目录，生成所有表格配置的选取列表</li>
<li>选取表格后，显示字段的编辑界面</li>
<li>保存字段属性的编辑结果，生成json配置文件</li>
<li>生成特定用途（usage）下的生成代码</li>
</ol></li>
</ol>
<h3 id="开发记录">开发记录</h3>
<p>github传送门：https://github.com/KaLuLas/ConfigCodeGen</p>
<p>配置json文件存放于Solution根目录下，路径先用绝对路径写死在Console的启动参数里面</p>
<ol type="1">
<li>ConfigCodeGenLib: .Net Standard Library
<ol type="1">
<li>Configuration：静态类，用于根据json文件配置工具环境</li>
<li>ConfigManager：单例模式，用于根据配置文件和json文件生成运行时数据</li>
<li>CodeGeneration.Generator：代码生成器</li>
</ol></li>
<li>ConfigCodeGenConsole: 调试Library用的Console类型project</li>
</ol>
<h4 id="配置形式说明">配置形式说明</h4>
<p>config.json</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;DataValueType&quot;: [&quot;int&quot;, &quot;float&quot;, &quot;boolean&quot;, &quot;string&quot;], &#x2F;&#x2F; 支持的值类型
    &quot;DataCollectionType&quot;: [&quot;none&quot;, &quot;array&quot;, &quot;list&quot;], &#x2F;&#x2F; 支持的容器类型
    &quot;ConfigJsonPath&quot;: &quot;Example\\ConfigJson\\&quot;, &#x2F;&#x2F; 相对路径，在该目录下存放描述配置的json
    &quot;CodeTemplatePath&quot;: &quot;Example\\CodeTemplate\\&quot;, &#x2F;&#x2F; 相对路径，在该目录下代码生成模板
    &quot;ConfigUsageType&quot;:&#123; &#x2F;&#x2F; 用户的自定义生成类型
        &quot;client&quot;:&#123; 
            &quot;CodeTemplateName&quot;: &quot;csharp.txt&quot;, &#x2F;&#x2F; 代码模板名
            &quot;TargetPath&quot;: &quot;Example\\Generated-C#\\&quot;, &#x2F;&#x2F; 生成代码目录
            &quot;TargetFileType&quot;: &quot;.cs&quot; &#x2F;&#x2F; 生成后缀名
        &#125;,
        &quot;server&quot;:&#123;
            &quot;CodeTemplateName&quot;: &quot;go.txt&quot;,
            &quot;TargetPath&quot;: &quot;Example\\Generated-go\\&quot;,
            &quot;TargetFileType&quot;: &quot;.go&quot;
        &#125;
    &#125;
&#125;</code></pre>
<p>table.json（配置文件对应json）</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
    &quot;ConfigName&quot; : &quot;AutoPickupConfig&quot;,
    &quot;Usage&quot;      : [
    ],
    &quot;Attributes&quot; : [
        &#123;
            &quot;AttributeName&quot; : &quot;Id&quot;,
            &quot;ValueType&quot;     : &quot;&quot;,
            &quot;CollectionType&quot; : &quot;&quot;,
            &quot;Usage&quot;          : [
            ]
        &#125;,
        &#123;
            &quot;AttributeName&quot; : &quot;Desc&quot;,
            &quot;ValueType&quot;     : &quot;&quot;,
            &quot;CollectionType&quot; : &quot;&quot;,
            &quot;Usage&quot;          : [
            ]
        &#125;,
        &#x2F;&#x2F; ...
    ]
&#125;</code></pre>
<h4 id="待办事项">待办事项</h4>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="" />
当json文件存在时，读取json构建Attributes的属性</li>
<li><input type="checkbox" disabled="" checked="" />
将日志器独立出来，方便后面添加回调</li>
<li><input type="checkbox" disabled="" checked="" />
表格的用途（usage）不是必要字段，可以考虑去掉</li>
<li><input type="checkbox" disabled="" checked="" />
提供自定义字段标记（tag）用于标记主键等</li>
<li><input type="checkbox" disabled="" checked="" />
根据现成的项目组读表代码写一个伪代码模板（见csharp.txt）</li>
<li><input type="checkbox" disabled="" />
根据伪代码模板给出终结/非终结符号与产生式</li>
<li><input type="checkbox" disabled="" />
实现代码模板的词法，语法分析</li>
<li><input type="checkbox" disabled="" />
实现代码模板中使用的各个功能</li>
<li><input type="checkbox" disabled="" />
用lua / 自实现语言来结合txt文本进行内容生成？ &lt;- here</li>
</ul>
]]></content>
      <categories>
        <category>开发设计稿</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>游戏开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机图形学中的四元数</title>
    <url>/p/d376051877fb/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="四元数与欧拉角">四元数与欧拉角</h1>
<p>以下内容主要是参考了<a
href="https://github.com/Krasjet/quaternion">Krasjet</a>关于四元数的介绍《四元数与三维旋转》：/p/d376051877fb/quaternion.pdf</p>
<p>会记录一些阅读过程中遇到的结论性内容，系统学习主要还是参考原文档为主</p>
<h2 id="复数">复数</h2>
<h3 id="复数相乘与2d旋转">1.3 复数相乘与2D旋转</h3>
<p>与复数 <span class="math inline">\(z=a+bi\)</span> 相乘代表着<span
class="math inline">\(\begin{bmatrix}a &amp; -b \\b &amp; a
\end{bmatrix}\)</span>
矩阵所作出的变换，将矩阵中的每一个元素都除以模长，可以得到以下变换：</p>
<p><span class="math display">\[
\begin{bmatrix}a &amp; -b \\b &amp; a \end{bmatrix} =
\sqrt{a^2+b^2}*\begin{bmatrix}\frac{a}{\sqrt{a^2+b^2}}&amp;\frac{-b}{\sqrt{a^2+b^2}}\\\frac{b}{\sqrt{a^2+b^2}}&amp;\frac{a}{\sqrt{a^2+b^2}}\end{bmatrix}
\]</span></p>
<a href="/p/d376051877fb/complex-plane.png" class="gallery-item"><img src="/p/d376051877fb/complex-plane.png" class="" title="复平面上的复数z"></a>
<p>从复平面观察可以得到，<span
class="math inline">\(\|z\|=\sqrt{a^2+b^2}\)</span> 且有 <span
class="math inline">\(\theta=\arctan(\frac{b}{a})\)</span>
，原本的矩阵转换为了两个变换矩阵的复合，其中左边的<span
class="math inline">\(\begin{bmatrix}\|z\|&amp;0\\0&amp;\|z\|\end{bmatrix}\)</span>是缩放矩阵，而右边的<span
class="math inline">\(\begin{bmatrix}\cos(
\theta)&amp;-\sin(\theta)\\\sin(\theta)&amp;\cos(\theta)\end{bmatrix}\)</span>则是2D旋转矩阵。</p>
<span id="more"></span>
<h3 id="旋转的复合">1.4 旋转的复合</h3>
<p><span class="math display">\[
\begin{aligned}z_{net}&amp;=(\cos(\theta)+i\sin(\theta))(\cos(\phi)+i\sin(\phi))\\&amp;=\cos(\theta+\phi)+i\sin(\theta+\phi)\end{aligned}
\]</span></p>
<p>对两个2D旋转进行复合时，所得的变换 <span
class="math inline">\(z_{net}\)</span>
仍是一个旋转，而且与施加的次序无关。这个等效变换的旋转角是两个旋转角之和。</p>
<h2 id="三维空间中的旋转">2 三维空间中的旋转</h2>
<p><strong>轴角式(Axis-angle)</strong> 旋转：给定旋转的转轴向量<span
class="math inline">\(\vec{u}=(x,y,z)^T\)</span>以及旋转的角度<span
class="math inline">\(\theta\)</span>，但实际在三维空间中表示方向只需要两个自由度（或者说两个变量），即与两个坐标轴的夹角，转轴向量可以除以模长转换为特定方向上的单位向量。</p>
<h3 id="旋转的分解">2.1 旋转的分解</h3>
<p>首先将要旋转的向量在垂直和平行于转轴的方向上进行分解，有<span
class="math inline">\(\vec{v}=\vec{v_\parallel}+\vec{v_\perp}\)</span>
，分别进行旋转后再相加就能得到旋转后的结果。</p>
<p>根据正交投影公式，可以得出</p>
<p><span class="math display">\[
\begin{aligned}v_\parallel&amp;=proj_{\vec{u}}(\vec{v})\\&amp;=\frac{\vec{u}\cdot\vec{v}}{\vec{u}\cdot\vec{u}}\vec{u}\\&amp;=(\vec{u}\cdot\vec{v})\vec{u}\end{aligned}
\]</span></p>
<p>又由于<span
class="math inline">\(\vec{v}=\vec{v_\|}+\vec{v_\perp}\)</span>，可以得到垂直于转轴方向有</p>
<p><span class="math display">\[
\begin{aligned}\vec{v_{\perp}}&amp;=\vec{v}-\vec{v_{\parallel}}\\&amp;=\vec{v}-(\vec{u}\cdot\vec{v})\vec{u}\end{aligned}
\]</span></p>
<h3 id="垂直分量的旋转">2.3 垂直分量的旋转</h3>
<p>在与<span
class="math inline">\(\vec{u}\)</span>垂直平面上的分量旋转角度<span
class="math inline">\(\theta\)</span>，可对结果进行下述表示，先构造一个正交于转轴向量和<span
class="math inline">\(\vec{v_{\perp}}\)</span>的向量<span
class="math inline">\(\vec{w}\)</span>：</p>
<p><span class="math display">\[
\vec{w}=\vec{u}\times\vec{v_\perp}
\]</span></p>
<p>可以得到正交于旋转轴<span
class="math inline">\(\vec{u}\)</span>的分量<span
class="math inline">\(\vec{v_\perp}\)</span>，旋转角度<span
class="math inline">\(\theta\)</span>后得到的<span
class="math inline">\(\vec{v_\perp^\prime}\)</span>：</p>
<p><span class="math display">\[
\begin{aligned}\vec{v_\perp^\prime}&amp;=\cos{\theta}\vec{v_\perp}+\sin{\theta}\vec{w}\\&amp;=\cos{\theta}\vec{v_\perp}+\sin{\theta}(\vec{u}\times\vec{v_\perp})\end{aligned}
\]</span></p>
<h3 id="vecv的旋转">2.4 <span
class="math inline">\(\vec{v}\)</span>的旋转</h3>
<p>根据上述公式可以得到以下推导，得到3D旋转公式，也称Rodrigues’ Rotation
Formula：</p>
<p><span class="math display">\[
\begin{equation}\begin{aligned}\vec{v^\prime}&amp;=\vec{v^\prime_\parallel}+\vec{v_\perp^\prime}\\&amp;=\vec{v_\parallel}+\cos{\theta}\vec{v_\perp}+\sin{\theta}(\vec{u}\times\vec{v_\perp})\\&amp;=(\vec{u}\cdot\vec{v})\vec{u}+\cos{\theta}(\vec{v}-(\vec{u}\cdot\vec{v})\vec{u})+\sin{\theta}(\vec{u}\times\vec{v})\\&amp;=\cos{\theta}\vec{v}+(1-\cos{\theta})(\vec{u}\cdot\vec{v})\vec{u}+\sin{\theta}(\vec{u}\times\vec{v})\end{aligned}\end{equation}
\]</span></p>
<p>其中第二步包含以下推导（叉乘遵守分配律）</p>
<p><span class="math display">\[
\begin{equation}\begin{aligned}\vec{u}\times\vec{v_\perp}&amp;=\vec{u}\times(\vec{v}-\vec{v_\parallel})\\&amp;=\vec{u}\times\vec{v}-\vec{u}\times\vec{v_\parallel}（\vec{u}平行于\vec{v_\parallel}，结果为0）\\&amp;=\vec{u}\times\vec{v}\end{aligned}\end{equation}
\]</span></p>
<h2 id="四元数">四元数</h2>
<p>所有四元数<span
class="math inline">\(q\in\mathbb{H}\)</span>都可以表现成下述形式</p>
<p><span class="math display">\[
\begin{equation}\begin{aligned}q=a+bi+cj+dk(a,b,c,d\in\mathbb{R})\end{aligned}\end{equation}
\]</span></p>
<p>其中有</p>
<p><span class="math display">\[
\begin{equation}i^2=j^2=k^2=ijk=-1\end{equation}
\]</span></p>
<h3 id="标量乘法-四元数乘法">3.1 标量乘法 &amp; 四元数乘法</h3>
<p>四元数与标量的乘法遵守交换律，但四元数之间的乘法比较特殊不遵守交换律，有左乘与右乘的区别，一般情况下左乘结果不等于右乘结果。举例对<span
class="math inline">\(q_1=a+bi+cj+dk\)</span>与<span
class="math inline">\(q_2=e+fi+gj+hk\)</span>之间的乘法有：</p>
<p><span class="math display">\[
\begin{equation}q_1q_2=\begin{bmatrix}a&amp;-b&amp;-c&amp;-d\\b&amp;a&amp;-d&amp;c\\c&amp;d&amp;a&amp;-b\\d&amp;-c&amp;b&amp;a\end{bmatrix}\begin{bmatrix}e\\f\\g\\h\end{bmatrix}\end{equation}
\]</span></p>
<p>进行<span class="math inline">\(q_1\)</span>右乘<span
class="math inline">\(q_2\)</span>有以下</p>
<p><span class="math display">\[
\begin{equation}q_2q_1=\begin{bmatrix}a&amp;-b&amp;-c&amp;-d\\b&amp;a&amp;d&amp;-c\\c&amp;-d&amp;a&amp;b\\d&amp;c&amp;-b&amp;a\end{bmatrix}\begin{bmatrix}e\\f\\g\\h\end{bmatrix}\end{equation}
\]</span></p>
<h3 id="graßmann积">3.1.6 Graßmann积</h3>
<p>对以上<span class="math inline">\(q_1\)</span>以及<span
class="math inline">\(q_2\)</span>有两者的乘积</p>
<p><span class="math display">\[
\begin{equation}\begin{aligned}q_1q_2=&amp;(ae-(bf+cg+dh))+\\&amp;(be+af+ch-dg)i+\\&amp;(ce+ag+df-bh)j+\\&amp;(de+ah+bg-cf)k\end{aligned}\end{equation}
\]</span></p>
<p>若给出以<span
class="math inline">\(\vec{i}、\vec{j}、\vec{k}\)</span>为基的向量<span
class="math inline">\(\vec{v}=\begin{bmatrix}b\\c\\d\end{bmatrix}\)</span>以及<span
class="math inline">\(\vec{u}=\begin{bmatrix}f\\g\\h\end{bmatrix}\)</span>，有以下</p>
<p><span class="math display">\[
\begin{equation}\begin{aligned}\vec{v}\cdot\vec{u}&amp;=bf+cg+dh\\\vec{v}\times\vec{u}&amp;=\left|\begin{matrix}\vec{i}&amp;\vec{j}&amp;\vec{k}\\b&amp;c&amp;d\\f&amp;g&amp;h\end{matrix}\right|\\&amp;=(ch-dg)\vec{i}-(bh-df)\vec{j}+(bg-cf)\vec{k}\end{aligned}\end{equation}
\]</span></p>
<p>最后可以得到Graßmann积结果，有对任意四元数<span
class="math inline">\(q_1=\begin{bmatrix}s,\vec{v}\end{bmatrix},
q_2=\begin{bmatrix}t,\vec{u}\end{bmatrix}\)</span>可以得到结果：</p>
<p><span class="math display">\[
\begin{equation}q_1q_2=\begin{bmatrix}st-\vec{v}\cdot\vec{u},
s\vec{u}+t\vec{v}+\vec{v}\times\vec{u}\end{bmatrix}\end{equation}
\]</span></p>
<p>需要留意这里的到的结果是一个四元数，前者是标量，后者是一个以<span
class="math inline">\(\vec{i}、\vec{j}、\vec{k}\)</span>为基的三维向量</p>
<h3 id="纯四元数">3.1.7 纯四元数</h3>
<p>to be continued...</p>
<h2 id="万向节死锁">万向节死锁</h2>
<p>包含了万向节死锁的部分问题，以Unity为例的回答</p>
<p><a
href="https://www.zhihu.com/question/321381903/answer/667753991">为什么Unity3d旋转默认采用了有万向节死锁的欧拉角，而不用四元数？</a></p>
<p><a
href="https://krasjet.github.io/quaternion/bonus_gimbal_lock.pdf">bonus_gimbal_lock.pdf</a></p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>计算机图形学</category>
        <category>坐标变换</category>
        <category>四元数</category>
      </categories>
      <tags>
        <tag>计算机图形学</tag>
        <tag>复数</tag>
        <tag>四元数</tag>
        <tag>万向节死锁</tag>
      </tags>
  </entry>
  <entry>
    <title>unity中的原生对象与托管对象</title>
    <url>/p/27ad02cebc90/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="序">序</h2>
<p>最初在工作中接触到引擎原生层相关的问题，是项目实现的延时执行模块，模块提供接口来进行委托的延时调用：</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; 返回一个token用于后续的CancelDelayCall
m_DelayExecuteGuidance &#x3D; GameFacade.CurrentGame.DelayCall(8.0f, OnPlayerGuideFinished);

&#x2F;&#x2F; 延时执行的代码示例
private void OnPlayerGuideFinished()
&#123;
    &#x2F;&#x2F; 作为MonoBehaviour的成员方法，访问gameObject
    Debug.Log(gameObject.name);
    &#x2F;&#x2F; something else...
&#125;</code></pre>
<p>延时执行模块与协程不同，不会因为gameObject的销毁而取消执行，假设在指定的8s后，组件绑定的gameObject已经销毁，那么试图在访问时就会产生这样的报错：</p>
<a href="/p/27ad02cebc90/image-20211221124140635.png" class="gallery-item"><img src="/p/27ad02cebc90/image-20211221124140635.png" class="" title="Unity console窗口内报错日志"></a>
<p>可以看到延时模块仍然保留了对MonoBehaviour的引用，但在试图通过property访问gameObejct的时候发生了报错，且提示代码位置为“managed-to-native”，体现了本文的主体：引擎的托管（managed）代码对原生（native）代码的访问，下面我们就集中介绍Unity引擎中的原生对象与托管对象。</p>
<span id="more"></span>
<h2 id="原生对象与托管对象">原生对象与托管对象</h2>
<p>Unity作为C++实现的游戏引擎，在运行时大部分的逻辑和内存管理都是在原生层（C++
code）进行，这里就将引擎在原生层创建的对象称为原生对象（native
object），基于引擎的游戏逻辑中创建的对象成为托管对象（managed
object）。当Unity创建一个Object的时候，存在着核心的原生层面的逻辑，另一部分则是更为常用的托管层面的C#逻辑，下面就先从Unity引擎中的Object说起。</p>
<hr />
<h2 id="understanding-unity-engine-objects">Understanding Unity Engine
Objects</h2>
<blockquote>
<p>节选翻译自
https://blog.eyas.sh/2020/10/unity-for-engineers-pt5-object-component/</p>
</blockquote>
<p>Unity引擎运行时使用C++实现，大多数引擎的要素（gameObject以及component等等）都处于C++侧。你也许也知道Unity引擎的API是以C#形式提供的。这些API为你提供了对Unity原生对象的访问，以至于这些对象用起来就像是C#对象一样亲切易懂。</p>
<a href="/p/27ad02cebc90/object-hierarchy.svg" class="gallery-item"><img src="/p/27ad02cebc90/object-hierarchy.svg" class="" title="A GameObject, MonoBehaviour, and ScriptableObject all inherit from UnityEngine Object"></a>
<h3 id="unityengine.object">UnityEngine.Object</h3>
<p>在继承链的顶端的是<code>UnityEngine.Object</code>。大多数情况下都提供<code>name</code>字符串，<code>GetInstanceID()</code>接口，以及一系列比较器（equality
comparers）。</p>
<p>这个类同时提供了静态方法 <code>static void Destroy(Object obj)</code>
来销毁一个 <code>UnityEngine.Object</code>
以及它的一切子类。当一个Object被销毁时，这个对象的原生层部分已被从内存中释放，而相对小的托管层部分将会在它没有被引用时被垃圾回收。</p>
<p>因为你在托管层对<code>UnityEngine.Object</code>的引用可能指向一个已经被销毁的原生层对象，所以<code>UnityEngine.Object</code>重写了C#的<code>operator==</code>以及<code>operator!=</code>让一个已被销毁的Object能够表现为null。所以对已在原生层被销毁的Object进行null判定会返回true，或者直接引发<code>NullRefrenceException</code>，来告诉你该对象已经被销毁。</p>
<p>可以在C#侧看到Object实现中，若与null进行比较，会调用<code>IsNativeObjectAlive</code>进行判定。</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; UnityEngine.Object.CompareBaseObjects
private static bool CompareBaseObjects(Object lhs, Object rhs)
&#123;
  bool flag1 &#x3D; (object) lhs &#x3D;&#x3D; null;
  bool flag2 &#x3D; (object) rhs &#x3D;&#x3D; null;
  if (flag2 &amp;&amp; flag1)
    return true;
  if (flag2)
    return !Object.IsNativeObjectAlive(lhs);
  return flag1 ? !Object.IsNativeObjectAlive(rhs) : lhs.m_InstanceID &#x3D;&#x3D; rhs.m_InstanceID;
&#125;</code></pre>
<h4 id="进行一下回顾非原文内容">进行一下回顾（非原文内容）</h4>
<p>在文章开始时我们给出了例子<code>GameFacade.CurrentGame.DelayCall</code>，现在我们在延时执行的代码中加上这些判断语句，并记录关键日志：</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">private void OnPlayerGuideFinished()
&#123;
    Debugger.Log(&quot;[UINewAutoPickUpSettingController.OnPlayerGuideFinished]&quot;);
    if (this &#x3D;&#x3D; null)
    &#123;
        Debugger.Log(&quot;[UINewAutoPickUpSettingController.OnPlayerGuideFinished] this is null&quot;);
    &#125;

    var mono &#x3D; this as MonoBehaviour;
    if (mono &#x3D;&#x3D; null)
    &#123;
        Debugger.Log(&quot;[UINewAutoPickUpSettingController.OnPlayerGuideFinished] mono is null&quot;);
    &#125;

    if (m_View.GuideCoverBtn &#x3D;&#x3D; null)
    &#123;
        Debugger.Log(&quot;[UINewAutoPickUpSettingController.OnPlayerGuideFinished] m_View.GuideCoverBtn is null&quot;);
    &#125;

    if (m_View.GuideCoverBtn.gameObject &#x3D;&#x3D; null)
    &#123;
        Debugger.Log(&quot;[UINewAutoPickUpSettingController.OnPlayerGuideFinished] m_View.GuideCoverBtn.gameObject is null&quot;);
    &#125;

    m_View.GuideCoverBtn.gameObject.SetActive(false);
&#125;</code></pre>
<p>运行测试时，我们会发现这些尽管托管层仍持有这些MonoBehaviour的引用，但这些引用已经全部被判定为null，这是由于我们销毁gameObject时，原生层对应的对象已经被从内存中销毁，对应内内存空间被释放，所以尽管托管层的<code>Object</code>对象还没有被垃圾回收，对象仍然可以被访问，但对自身的null判定会全部为true。</p>
<p>同时我们也要注意到null判定为true是因为<code>operator==</code>的重写，但是仍然指向一个托管层的<code>Object</code>对象，这个对象的成员（如m_View，是一个纯C#侧对象）仍然是可以被访问的，只在最终访问到原生层对象，或者试图获取原生层对象时报错。</p>
<a href="/p/27ad02cebc90/image-20211221143715637.png" class="gallery-item"><img src="/p/27ad02cebc90/image-20211221143715637.png" class="" title="image-20211221143715637"></a>
<p>上图为运行日志结果，报错的为<code>UnityEngine.Component</code>中的<code>getter</code>方法：</p>
<pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;&#x2F; &lt;summary&gt;
&#x2F;&#x2F;&#x2F;   &lt;para&gt;The game object this component is attached to. A component is always attached to a game object.&lt;&#x2F;para&gt;
&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;
&#x2F;&#x2F;&#x2F; &lt;footer&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;docs.unity3d.com&#x2F;2018.4&#x2F;Documentation&#x2F;ScriptReference&#x2F;30_search.html?q&#x3D;Component-gameObject&quot;&gt;&#96;Component.gameObject&#96; on docs.unity3d.com&lt;&#x2F;a&gt;&lt;&#x2F;footer&gt;
public extern GameObject gameObject &#123; [FreeFunction(&quot;GetGameObject&quot;, HasExplicitThis &#x3D; true), MethodImpl(MethodImplOptions.InternalCall)] get; &#125;</code></pre>
<p>可以看到这里就是在试图获取原生层gameObject时抛出了错误</p>
<h3 id="gameobject-component">GameObject &amp; Component</h3>
<h4 id="gameobject">GameObject</h4>
<blockquote>
<p>此部分内容进行省略，可跳转到原文查看完整内容</p>
</blockquote>
<p><code>GameObject</code>从<code>Object</code>继承而来，用以代表你场景中的一切对象。一个GameObject持有一个Component的列表，且至少拥有一个Component，即Transform，用以描述GameObject的空间信息，如position和rotation等。</p>
<h4 id="component">Component</h4>
<blockquote>
<p>此部分内容进行省略，可跳转到原文查看完整内容</p>
<p>Unity通过Component对象的组合来定义gameObject的行为表现，这是被游戏引擎（游戏开发者）成为Entity
Component System的核心描述/信条...
容易混淆的是Unity也将他们推出的次世代高性能游戏编程范式（paradigm）成为ECS，即不仅引擎逻辑，游戏逻辑也使用ECS来实现，从而成为一种数据驱动的设计。</p>
</blockquote>
<p>GameObject的行为通过Component的组合来驱动，用户实现的组件通常需要继承类<code>MonoBehaviour</code>。对于Component来说：</p>
<ol type="1">
<li>必须归属于一个GameObject，通过属性<code>gameObject</code>进行访问</li>
<li>可以接收到<strong>messages</strong>，用于驱动自身的特殊行为（即事件方法）</li>
</ol>
<p>Component最重要的功能由Unity Messages驱动（也称为Unity Event
Functions），这些都是引擎在特定时间下触发的callback方法，详情可以参考官方文档。</p>
<p>若你需要在特定时机执行一些逻辑，添加这些message的同名方法即可，引擎运行时（runtime）会使用反射来进行方法调用，这就是为什么你在这些方法上看不到<code>override</code>关键字。每个Component类型的<code>Update</code>，<code>LateUpdate</code>，<code>FixedUpdate</code>这些消息都只会被反射获取一次，所以不用担心反射在每个游戏帧都被执行（有关内容可以参阅
https://blog.unity.com/technology/1k-update-calls）。</p>
<p><code>Behaviour</code>是可以被设置enabled / disabled
状态的Component，在disable的状态下，一些事件方法将不会执行。而<code>MonoBehaviour</code>是可以使用协程（受Unity
Engine管理）的Behaviour。</p>
<h3 id="要点">要点</h3>
<ol type="1">
<li>Unity object在原生层销毁后表现为null，<code>==
null</code>判定可能做了一些你料想之外的工作</li>
<li>因此，其他的null运算符（如?.）可能不起作用</li>
<li>Unity Messages 可以是私有的！</li>
<li>如果没有必要的话，不要声明<code>Update</code>这样的方法用于override等，这会让引擎多调用一些额外的方法</li>
<li>对无用的Object或者Component进行disable是限制游戏逻辑或节省CPU开销的一种方式，但这些对象仍然会占用内存</li>
</ol>
<hr />
<h2 id="原生对象与托管对象的引擎管理">原生对象与托管对象的引擎管理</h2>
<p>WIP</p>
<h2 id="参考文章">参考文章</h2>
<ol type="1">
<li><a href="https://blog.eyas.sh/2020/10/unity-for-engineers-pt5-object-component/" title="" target="">Understanding Unity Engine Objects</a></li>
<li><a href="https://blog.unity.com/technology/1k-update-calls" title="文章1中的推荐阅读" target="">unity blog: 10000 Update() calls</a></li>
<li><a href="https://developer.unity.cn/projects/6152e4fbedbc2a0020584027" title="" target="">揭秘Unity的黑盒世界，原生对象和托管对象浅谈</a></li>
</ol>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>游戏开发</category>
        <category>Unity</category>
        <category>引擎实现原理</category>
      </categories>
      <tags>
        <tag>游戏开发</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>通关后简单地评价一下P5R</title>
    <url>/p/a31f36d806f9/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="写在前面">写在前面</h2>
<p>从最早17年看<a
href="https://www.bilibili.com/video/BV1ux411k7Pk?spm_id_from=333.999.0.0">狗头人玩女神异闻录5</a>，到17下半年自己攒钱买了显示器和缩水版的ps4slim在寝室里自己玩，再到19年皇家版游戏发售找代购入了收藏版，我终于在22年年初换了工作之后忙里偷闲地把它作为psn平台上的第一个白金游戏通关了。</p>
<a href="/p/a31f36d806f9/platinum-award.jpg" class="gallery-item"><img src="/p/a31f36d806f9/platinum-award.jpg" class="" title="其实也得谢谢皇家版是一款相对容易白金的游戏"></a>
<p>前前后后五年间跟这个系列之间的故事自然也不少了，虽然至今为止也不能说自己是一个很合格的系列粉丝——并不是那种真的和系列一起长大的玩家，除了通关了第五代游戏和在系列上花了不少钱其实也没有什么拿的出手的粉丝证明，但是还是想在这里简单地记录一下皇家版与我之间的故事，并说说我对皇家版的看法。</p>
<span id="more"></span>
<h2 id="不得了的演唱会和新作预告">不得了的演唱会和新作预告</h2>
<p>19年4月的时候，p5r和p5s宣布在演唱会的前后两天宣布发售，大二在读的我自然也没什么办法跑去岛国演唱会现场，就充了niconico收费会员在线上同步视听，当时糟糕的梯子+niconico悲剧的直播体验结合起来，整场演唱会基本就是只能挂在后台听的水平。不过day1第一天p5r公布的时候，还是能大概只有256p的画面里看出现场观众的兴奋（当然，我也）。</p>
<p>相较day1放出的加强版预告，day2公布的是一个光荣开发的系列衍生割草游戏p5s，自然就没能激起多大水花，而且现在回想起来，当时放出pv也是得背锅的——没把该作即时战斗的乐趣体现出来，同时对新角色也只给了一个很诡异的特写（其实后面玩过的大家都知道索菲亚超可爱）。</p>
<a href="https://www.bilibili.com/video/BV14T4y1J7ws?from=search&seid=10262646871642464225&spm_id_from=333.337.0.0" title="[私心传送门]" target="">来感受一下索菲亚商店</a>
<p>当时兴头上的我自然是找到能代购店的第一时间就下单了。虽然当时心里也清楚加强版的大多剧情和无印版（也就是最早发售的非加强版）没什么区别，但也想着能够体验一下初见的乐趣，也许能带来更大的感触也说不定。</p>
<a href="/p/a31f36d806f9/unbox.jpg" class="gallery-item"><img src="/p/a31f36d806f9/unbox.jpg" class="" title="现在想起来这一箱送的东西除了cd还真没啥有用的"></a>
<p>然而虽然日文版如约在19年的11月送达了宿舍，当时我已经在为毕业去向苦恼了，而且日文版没什么差异的开头剧情也让我没能特别抽出空来玩。结果一直到20年中文版发售，这时候我甚至已经下单了中文版，却依然没能正式地开始游戏，只是零星地玩了一点点。而这时候，一些关于皇家版的中文评价就开始扩散开来了...</p>
<p>这里就会扯到我这几年对atlus发过的一些牢骚，其中第一点就是希望他们<strong>不要再把日文版和非日文版分开时段发售了</strong>，这样想要日语苦手的玩家想在不被剧透，不被他人的主观评价影响的情况下享受初见的乐趣，几乎是一件不可能的事。</p>
<p>待续！之后聊皇家版的发售评价！</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script src="/js/lg-thumbnail.min.js"></script><script src="/js/lg-zoom.min.js"></script><script src="/js/lg-fullscreen.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <categories>
        <category>电玩咖</category>
        <category>女神异闻录</category>
      </categories>
      <tags>
        <tag>通关纪念</tag>
        <tag>游戏测评</tag>
        <tag>女神异闻录</tag>
      </tags>
  </entry>
</search>
